// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: product.sql

package database

import (
	"context"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (name, img, price) VALUES (?, ?, ?) RETURNING id, name, img, price
`

type CreateProductParams struct {
	Name  string  `json:"name"`
	Img   string  `json:"img"`
	Price float64 `json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct, arg.Name, arg.Img, arg.Price)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Img,
		&i.Price,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :many
SELECT id, name, img, price FROM products
`

func (q *Queries) GetProduct(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getProduct)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Img,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductById = `-- name: GetProductById :one
SELECT id, name, img, price FROM products WHERE id = ?
`

func (q *Queries) GetProductById(ctx context.Context, id int64) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProductById, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Img,
		&i.Price,
	)
	return i, err
}
