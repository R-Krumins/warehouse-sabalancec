// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: allergen.sql

package database

import (
	"context"
)

const createAllergen = `-- name: CreateAllergen :one
INSERT INTO allergens (name, img, info) VALUES (?, ?, ?) RETURNING id, name, img, info
`

type CreateAllergenParams struct {
	Name string `json:"name"`
	Img  string `json:"img"`
	Info string `json:"info"`
}

func (q *Queries) CreateAllergen(ctx context.Context, arg CreateAllergenParams) (Allergen, error) {
	row := q.db.QueryRowContext(ctx, createAllergen, arg.Name, arg.Img, arg.Info)
	var i Allergen
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Img,
		&i.Info,
	)
	return i, err
}

const getAllergen = `-- name: GetAllergen :many
SELECT id, name, img, info FROM allergens
`

func (q *Queries) GetAllergen(ctx context.Context) ([]Allergen, error) {
	rows, err := q.db.QueryContext(ctx, getAllergen)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Allergen
	for rows.Next() {
		var i Allergen
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Img,
			&i.Info,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllergenById = `-- name: GetAllergenById :one
SELECT id, name, img, info FROM allergens WHERE id = ?
`

func (q *Queries) GetAllergenById(ctx context.Context, id int64) (Allergen, error) {
	row := q.db.QueryRowContext(ctx, getAllergenById, id)
	var i Allergen
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Img,
		&i.Info,
	)
	return i, err
}
