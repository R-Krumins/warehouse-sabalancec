// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (uuid, name, email, address, role)
VALUES (?, ?, ?, ?, ?) RETURNING uuid, name, email, address, role
`

type CreateUserParams struct {
	Uuid    string `json:"uuid"`
	Name    string `json:"name"`
	Email   string `json:"email"`
	Address string `json:"address"`
	Role    string `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Uuid,
		arg.Name,
		arg.Email,
		arg.Address,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Email,
		&i.Address,
		&i.Role,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT uuid, name, email, address, role FROM users
WHERE uuid = ?
`

func (q *Queries) GetUser(ctx context.Context, uuid string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, uuid)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.Email,
		&i.Address,
		&i.Role,
	)
	return i, err
}
