// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: productAllergen.sql

package database

import (
	"context"
)

const createProductAllergen = `-- name: CreateProductAllergen :one
INSERT INTO product_allergen (product_fk, allergen_fk) 
VALUES (?, ?) RETURNING id, product_fk, allergen_fk
`

type CreateProductAllergenParams struct {
	ProductFk  int64 `json:"product_fk"`
	AllergenFk int64 `json:"allergen_fk"`
}

func (q *Queries) CreateProductAllergen(ctx context.Context, arg CreateProductAllergenParams) (ProductAllergen, error) {
	row := q.db.QueryRowContext(ctx, createProductAllergen, arg.ProductFk, arg.AllergenFk)
	var i ProductAllergen
	err := row.Scan(&i.ID, &i.ProductFk, &i.AllergenFk)
	return i, err
}

const getAllergensForProduct = `-- name: GetAllergensForProduct :many
SELECT a.id, a.name
FROM product_allergen pa
LEFT JOIN allergens a ON pa.allergen_fk = a.id
WHERE pa.product_fk = ?1
`

type GetAllergensForProductRow struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) GetAllergensForProduct(ctx context.Context, productid int64) ([]GetAllergensForProductRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllergensForProduct, productid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllergensForProductRow
	for rows.Next() {
		var i GetAllergensForProductRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsForAllergen = `-- name: GetProductsForAllergen :many
SELECT id, product_fk, allergen_fk FROM product_allergen
WHERE allergen_fk = ?
`

func (q *Queries) GetProductsForAllergen(ctx context.Context, allergenFk int64) ([]ProductAllergen, error) {
	rows, err := q.db.QueryContext(ctx, getProductsForAllergen, allergenFk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ProductAllergen
	for rows.Next() {
		var i ProductAllergen
		if err := rows.Scan(&i.ID, &i.ProductFk, &i.AllergenFk); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
