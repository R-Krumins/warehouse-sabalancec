// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cart.sql

package database

import (
	"context"
)

const getAllCartItems = `-- name: GetAllCartItems :many
SELECT id, user_uuid, product_fk, quantity FROM cart
WHERE user_uuid = sql.arg(userId)
`

func (q *Queries) GetAllCartItems(ctx context.Context) ([]Cart, error) {
	rows, err := q.db.QueryContext(ctx, getAllCartItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cart
	for rows.Next() {
		var i Cart
		if err := rows.Scan(
			&i.ID,
			&i.UserUuid,
			&i.ProductFk,
			&i.Quantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const patchCart = `-- name: PatchCart :one
INSERT INTO cart (user_uuid, product_fk, quantity)
VALUES (?, ?, ?)
ON CONFLICT(user_uuid, product_fk) DO UPDATE SET
    quantity = cart.quantity + EXCLUDED.quantity
RETURNING id, user_uuid, product_fk, quantity
`

type PatchCartParams struct {
	UserUuid  string `json:"user_uuid"`
	ProductFk int64  `json:"product_fk"`
	Quantity  int64  `json:"quantity"`
}

func (q *Queries) PatchCart(ctx context.Context, arg PatchCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, patchCart, arg.UserUuid, arg.ProductFk, arg.Quantity)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.ProductFk,
		&i.Quantity,
	)
	return i, err
}
