// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cart.sql

package database

import (
	"context"
)

const getCartForUser = `-- name: GetCartForUser :many
SELECT 
  c.id AS cart_item_id, 
  p.id AS product_id, 
  p.name, 
  p.img, 
  p.price AS price_per_unit, 
  c.quantity, 
  (p.price * c.quantity) AS sum_total
FROM 
  cart c
INNER JOIN 
  products p ON c.product_fk = p.id
WHERE
  c.user_uuid = ?1
`

type GetCartForUserRow struct {
	CartItemID   int64       `json:"cart_item_id"`
	ProductID    int64       `json:"product_id"`
	Name         string      `json:"name"`
	Img          string      `json:"img"`
	PricePerUnit float64     `json:"price_per_unit"`
	Quantity     int64       `json:"quantity"`
	SumTotal     interface{} `json:"sum_total"`
}

func (q *Queries) GetCartForUser(ctx context.Context, useruuid string) ([]GetCartForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, getCartForUser, useruuid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCartForUserRow
	for rows.Next() {
		var i GetCartForUserRow
		if err := rows.Scan(
			&i.CartItemID,
			&i.ProductID,
			&i.Name,
			&i.Img,
			&i.PricePerUnit,
			&i.Quantity,
			&i.SumTotal,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const patchCart = `-- name: PatchCart :one
INSERT INTO cart (user_uuid, product_fk, quantity)
VALUES (?, ?, ?)
ON CONFLICT(user_uuid, product_fk) DO UPDATE SET
    quantity = cart.quantity + EXCLUDED.quantity
RETURNING id, user_uuid, product_fk, quantity
`

type PatchCartParams struct {
	UserUuid  string `json:"user_uuid"`
	ProductFk int64  `json:"product_fk"`
	Quantity  int64  `json:"quantity"`
}

func (q *Queries) PatchCart(ctx context.Context, arg PatchCartParams) (Cart, error) {
	row := q.db.QueryRowContext(ctx, patchCart, arg.UserUuid, arg.ProductFk, arg.Quantity)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserUuid,
		&i.ProductFk,
		&i.Quantity,
	)
	return i, err
}
